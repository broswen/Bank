service: bank
frameworkVersion: "2"

plugins:
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1

  httpApi:
    authorizers:
      ClientAuthorizer:
        type: request
        functionName: ClientAuthorizer
        payloadVersion: "2.0"
        enableSimpleResponses: true
        identitySource: $request.header.Auth

  logs:
    httpApi: true

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:BatchWriteItem
      Resource:
        - !GetAtt RoutingTable.Arn
        - !GetAtt ClientsTable.Arn
    - Effect: "Allow"
      Action:
        - s3:GetObject
      Resource:
        - !GetAtt DataBucket.Arn
        - !Join ["/", [!GetAtt DataBucket.Arn, "*"]]

  environment:
    ROUTING_TABLE: !Ref RoutingTable
    CLIENTSTABLE: !Ref ClientsTable

functions:
  LookupBank:
    handler: src/lambdas/LookupBank.handler
    timeout: 2
    memorySize: 128
    reservedConcurrency: 10
    events:
      - httpApi:
          path: /bank/{cc}/{rn}
          method: get
          authorizer:
            name: ClientAuthorizer

  ClientAuthorizer:
    handler: src/lambdas/ClientAuthorizer.handler
    timeout: 2
    memorySize: 128
    reservedConcurrency: 10

  LoadData:
    handler: src/lambdas/LoadData.handler
    timeout: 10
    memorySize: 512
    reservedConcurrency: 1
    events:
      - sqs:
          arn: !GetAtt LoadDataQueue.Arn
          batchSize: 1
          maximumBatchingWindow: 60

# you can add CloudFormation resource templates here
resources:
  Resources:
    DataBucket:
      DependsOn: LoadDataQueuePolicy
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-data-bucket
        NotificationConfiguration:
          QueueConfigurations:
            - Event: s3:ObjectCreated:*
              Queue: !GetAtt LoadDataQueue.Arn

    LoadDataQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref LoadDataQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
                - SQS:SendMessage
              Resource: !GetAtt LoadDataQueue.Arn
              Principal:
                Service: s3.amazonaws.com
              Condition:
                ArnLike:
                  aws:SourceArn: arn:aws:s3:*:*:${self:service}-${self:provider.stage}-data-bucket

    LoadDataQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-data-queue
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt LoadDataDLQ.Arn
          maxReceiveCount: 1

    LoadDataDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-data-dlq

    RoutingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        TableName: ${self:service}-${self:provider.stage}-routing-table
        BillingMode: PAY_PER_REQUEST

    ClientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-clients-table
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
